{"version":3,"sources":["App.tsx","../../src/index.ts","index.tsx"],"names":["App","useState","timer","interval","autostart","expireImmediate","onExpire","onReset","countdown","setCountdown","canStart","setCanStart","isRunning","setIsRunning","initStopped","time","reset","expire","countdownRef","current","id","setInterval","prev","clearInterval","start","pause","useCountdownTimer","setActions","actions","React","logAction","message","action","onClick","map","index","key","ReactDOM","render","document","getElementById"],"mappings":"qJAGe,SAASA,IAAO,MAAD,EACZC,mBAAS,KADG,E,SCgBI,G,IAChCC,EAAA,EAAAA,MACA,IAAAC,gBAAA,IAAW,EAAX,MACA,IAAAC,iBAAA,IAAY,GAAZ,EACA,IAAAC,uBAAA,IAAkB,GAAlB,EACAC,EAAA,EAAAA,SACAC,EAAA,EAAAA,QAEM,wBAACC,EAAA,KAAWC,EAAA,KACZ,wBAACC,EAAA,KAAUC,EAAA,KACX,yBAACC,EAAA,KAAWC,EAAA,KAWlB,SAASC,EAAYC,GACnBJ,GAAY,GACZE,GAAa,GACbJ,EAAaM,GAGf,IAAMC,EAAQ,uBAAY,WACxBF,EAAYZ,GACRK,GAA8B,oBAAZA,GACpBA,MAED,CAACL,EAAOK,IAELU,EAAS,uBAAY,WACzBH,EAAYZ,GACRI,GAAgC,oBAAbA,GACrBA,MAED,CAACJ,EAAOI,IAELY,EAAe,iBAAehB,GA2BpC,OA1BA,qBAAU,WACRgB,EAAaC,QAAUX,IACtB,CAACA,IAEJ,qBAAU,WAYR,IAAIY,EAOJ,OANIV,IACFU,EAAKC,aAbP,WAEIH,EAAaC,QAAU,KAAQ,GAC9Bd,IAAoBa,EAAaC,QAAUhB,GAAY,KAAQ,EAEhEc,IAEAR,GAAa,SAAAa,GAAQ,OAAAA,EAAOnB,OAMPA,GAClBS,GACHC,GAAa,IAGV,WAAM,OAAAU,cAAcH,MAC1B,CAACH,EAAQP,EAAUP,EAAUE,EAAiBO,IAE1C,CACLJ,UAAS,EACTgB,MA1DF,WACEb,GAAY,IA0DZK,MAAK,EACLS,MAxDF,WACEd,GAAY,GACZE,GAAa,IAuDbD,UAAS,GDvF2Cc,CAAkB,CACtExB,MAH0B,oBAI1BI,SAAU,KACRqB,EAAWC,GAAW,IAAIA,EAAS,qBAErCrB,QAAS,KACPoB,EAAWC,GAAW,IAAIA,EAAS,sBAN/BpB,EAFoB,EAEpBA,UAAWgB,EAFS,EAETA,MAAOR,EAFE,EAEFA,MAAOS,EAFL,EAEKA,MAAOb,EAFZ,EAEYA,UAFZ,EAWEiB,IAAM5B,SAAmB,IAX3B,mBAWrB2B,EAXqB,KAWZD,EAXY,KAatBG,EAAY,CAACC,EAAiBC,KAClCL,EAAWC,GAAW,IAAIA,EAASG,IACnCC,KAGF,OACE,oCACE,6BAAMxB,GACJI,EAGA,4BAAQqB,QAAS,IAAMH,EAAU,QAASL,IAA1C,SAFA,4BAAQQ,QAAS,IAAMH,EAAU,QAASN,IAA1C,SAIF,4BAAQS,QAAS,IAAMH,EAAU,QAASd,IAA1C,SAEA,4CACA,4BACGY,EAAQM,IAAI,CAACF,EAAQG,IACpB,wBAAIC,IAAG,UAAKJ,EAAL,YAAeG,IAAUH,ME9B1CK,IAASC,OAAO,kBAACtC,EAAD,MAASuC,SAASC,eAAe,U","file":"static/js/main.11b1a59a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useCountdownTimer } from 'use-countdown-timer';\n\nexport default function App() {\n  const [timer] = useState(1000 * 5);\n  const { countdown, start, reset, pause, isRunning } = useCountdownTimer({\n    timer,\n    onExpire: () => {\n      setActions(actions => [...actions, 'Expire Callback']);\n    },\n    onReset: () => {\n      setActions(actions => [...actions, 'Reset Callback']);\n    },\n  });\n  const [actions, setActions] = React.useState<string[]>([]);\n\n  const logAction = (message: string, action: () => void) => {\n    setActions(actions => [...actions, message]);\n    action();\n  };\n\n  return (\n    <>\n      <div>{countdown}</div>\n      {!isRunning ? (\n        <button onClick={() => logAction('Start', start)}>Start</button>\n      ) : (\n        <button onClick={() => logAction('Pause', pause)}>Pause</button>\n      )}\n      <button onClick={() => logAction('Reset', reset)}>Reset</button>\n\n      <p>Actions Taken</p>\n      <ul>\n        {actions.map((action, index) => (\n          <li key={`${action}-${index}`}>{action}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nexport interface ICountdownTimerParams {\n  timer: number;\n  interval?: number;\n  autostart?: boolean;\n  expireImmediate?: boolean;\n  onExpire?: () => void;\n  onReset?: () => void;\n}\n\nexport type CountdownTimerResults = {\n  countdown: number;\n  isRunning: boolean;\n  start: () => void;\n  reset: () => void;\n  pause: () => void;\n};\n\nexport function useCountdownTimer({\n  timer,\n  interval = 1000,\n  autostart = false,\n  expireImmediate = false,\n  onExpire,\n  onReset,\n}: ICountdownTimerParams): CountdownTimerResults {\n  const [countdown, setCountdown] = useState(timer);\n  const [canStart, setCanStart] = useState(autostart);\n  const [isRunning, setIsRunning] = useState(false);\n\n  function start(): void {\n    setCanStart(true);\n  }\n\n  function pause(): void {\n    setCanStart(false);\n    setIsRunning(false);\n  }\n\n  function initStopped(time: number) {\n    setCanStart(false);\n    setIsRunning(false);\n    setCountdown(time);\n  }\n\n  const reset = useCallback(() => {\n    initStopped(timer);\n    if (onReset && typeof onReset === 'function') {\n      onReset();\n    }\n  }, [timer, onReset]);\n\n  const expire = useCallback(() => {\n    initStopped(timer);\n    if (onExpire && typeof onExpire === 'function') {\n      onExpire();\n    }\n  }, [timer, onExpire]);\n\n  const countdownRef = useRef<number>(timer);\n  useEffect(() => {\n    countdownRef.current = countdown;\n  }, [countdown]);\n\n  useEffect(() => {\n    function tick() {\n      if (\n        countdownRef.current / 1000 <= 0 ||\n        (expireImmediate && (countdownRef.current - interval) / 1000 <= 0)\n      ) {\n        expire();\n      } else {\n        setCountdown(prev => prev - interval);\n      }\n    }\n\n    let id: NodeJS.Timeout;\n    if (canStart) {\n      id = setInterval(tick, interval);\n      if (!isRunning) {\n        setIsRunning(true);\n      }\n    }\n    return () => clearInterval(id);\n  }, [expire, canStart, interval, expireImmediate, isRunning]);\n\n  return {\n    countdown,\n    start,\n    reset,\n    pause,\n    isRunning,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}