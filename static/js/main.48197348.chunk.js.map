{"version":3,"sources":["index.tsx","App.tsx","../../src/index.ts"],"names":["ReactDOM","render","timer","interval","autostart","expireImmediate","onExpire","onReset","countdown","setCountdown","canStart","setCanStart","reset","expire","countdownRef","current","id","setInterval","prev","clearInterval","start","useCountdownTimer","setActions","actions","React","logAction","message","action","onClick","map","index","key","document","getElementById"],"mappings":"4JAIAA,IAASC,OAAO,mBCDD,WAAgB,IAAD,E,SCcI,G,IAChCC,EAAA,EAAAA,MACA,IAAAC,gBAAA,IAAW,EAAX,MACA,IAAAC,iBAAA,IAAY,GAAZ,EACA,IAAAC,uBAAA,IAAkB,GAAlB,EACAC,EAAA,EAAAA,SACAC,EAAA,EAAAA,QAEM,wBAACC,EAAA,KAAWC,EAAA,KACZ,wBAACC,EAAA,KAAUC,EAAA,KAMXC,EAAQ,uBAAY,WACxBD,GAAY,GACZF,EAAaP,GACTK,GAA8B,oBAAZA,GACpBA,MAED,CAACL,EAAOK,IAELM,EAAS,uBAAY,WACzBF,GAAY,GACZF,EAAaP,GACTI,GAAgC,oBAAbA,GACrBA,MAED,CAACJ,EAAOI,IAELQ,EAAe,iBAAeZ,GAwBpC,OAvBA,qBAAU,WACRY,EAAaC,QAAUP,IACtB,CAACA,IAEJ,qBAAU,WAYR,IAAIQ,EAIJ,OAHIN,IACFM,EAAKC,aAbP,WAEIH,EAAaC,QAAU,KAAQ,GAC9BV,IAAoBS,EAAaC,QAAUZ,GAAY,KAAQ,EAEhEU,IAEAJ,GAAa,SAAAS,GAAQ,OAAAA,EAAOf,OAMPA,IAElB,WAAM,OAAAgB,cAAcH,MAC1B,CAACH,EAAQH,EAAUP,EAAUE,IAEzB,CACLG,UAAS,EACTY,MA9CF,WACET,GAAY,IA8CZC,MAAK,GDvE6BS,CAAkB,CACpDnB,MAAO,IACPI,SAAU,WACRgB,GAAW,SAAAC,GAAO,4BAAQA,GAAR,CAAiB,wBAErChB,QAAS,WACPe,GAAW,SAAAC,GAAO,4BAAQA,GAAR,CAAiB,yBAN/Bf,EADoB,EACpBA,UAAWY,EADS,EACTA,MAAOR,EADE,EACFA,MADE,EAUEY,WAAyB,IAV3B,mBAUrBD,EAVqB,KAUZD,EAVY,KAYtBG,EAAY,SAACC,EAAiBC,GAClCL,GAAW,SAAAC,GAAO,4BAAQA,GAAR,CAAiBG,OACnCC,KAGF,OACE,gBAAC,WAAD,KACE,2BAAMnB,GACN,0BAAQoB,QAAS,kBAAMH,EAAU,QAASL,KAA1C,SACA,0BAAQQ,QAAS,kBAAMH,EAAU,QAASb,KAA1C,SAEA,0CACA,0BACGW,EAAQM,KAAI,SAACF,EAAQG,GAAT,OACX,sBAAIC,IAAG,UAAKJ,EAAL,YAAeG,IAAUH,UDzB1B,MAASK,SAASC,eAAe,U","file":"static/js/main.48197348.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import * as React from 'react';\nimport { useCountdownTimer } from 'use-countdown-timer';\n\nexport default function App() {\n  const { countdown, start, reset } = useCountdownTimer({\n    timer: 1000 * 5,\n    onExpire: () => {\n      setActions(actions => [...actions, 'Expire Callback']);\n    },\n    onReset: () => {\n      setActions(actions => [...actions, 'Reset Callback']);\n    },\n  });\n  const [actions, setActions] = React.useState<string[]>([]);\n\n  const logAction = (message: string, action: () => void) => {\n    setActions(actions => [...actions, message]);\n    action();\n  };\n\n  return (\n    <React.Fragment>\n      <div>{countdown}</div>\n      <button onClick={() => logAction('Start', start)}>Start</button>\n      <button onClick={() => logAction('Reset', reset)}>Reset</button>\n\n      <p>Actions Taken</p>\n      <ul>\n        {actions.map((action, index) => (\n          <li key={`${action}-${index}`}>{action}</li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nexport interface ICountdownTimerParams {\n  timer: number;\n  interval?: number;\n  autostart?: boolean;\n  expireImmediate?: boolean;\n  onExpire?: () => void;\n  onReset?: () => void;\n}\n\nexport type CountdownTimerResults = {\n  countdown: number;\n  start: () => void;\n  reset: () => void;\n};\n\nexport function useCountdownTimer({\n  timer,\n  interval = 1000,\n  autostart = false,\n  expireImmediate = false,\n  onExpire,\n  onReset,\n}: ICountdownTimerParams): CountdownTimerResults {\n  const [countdown, setCountdown] = useState(timer);\n  const [canStart, setCanStart] = useState(autostart);\n\n  function start(): void {\n    setCanStart(true);\n  }\n\n  const reset = useCallback(() => {\n    setCanStart(false);\n    setCountdown(timer);\n    if (onReset && typeof onReset === 'function') {\n      onReset();\n    }\n  }, [timer, onReset]);\n\n  const expire = useCallback(() => {\n    setCanStart(false);\n    setCountdown(timer);\n    if (onExpire && typeof onExpire === 'function') {\n      onExpire();\n    }\n  }, [timer, onExpire]);\n\n  const countdownRef = useRef<number>(timer);\n  useEffect(() => {\n    countdownRef.current = countdown;\n  }, [countdown]);\n\n  useEffect(() => {\n    function tick() {\n      if (\n        countdownRef.current / 1000 <= 0 ||\n        (expireImmediate && (countdownRef.current - interval) / 1000 <= 0)\n      ) {\n        expire();\n      } else {\n        setCountdown(prev => prev - interval);\n      }\n    }\n\n    let id: NodeJS.Timeout;\n    if (canStart) {\n      id = setInterval(tick, interval);\n    }\n    return () => clearInterval(id);\n  }, [expire, canStart, interval, expireImmediate]);\n\n  return {\n    countdown,\n    start,\n    reset,\n  };\n}\n"],"sourceRoot":""}